"""
pygame base classes
"""

__author__ = "marcioz98"
__license__ = "WTFPL"
__version__ = "0.0.4"


import pygame
from pygame.locals import *
from random import randint as ri


pygame.init()
default_font_name = pygame.font.get_default_font()
default_font_size = 24
default_font_color = (255, 255, 0)
default_font = pygame.font.Font(default_font_name, default_font_size)


class Camera(pygame.sprite.Sprite):
    """Camera: global camera class"""

    sprites = pygame.sprite.Group()
    onscreen = pygame.sprite.Group()
    debug = False

    def __init__(self, window, clock, width, height, x=0, y=0):
        self.window = window
        self.clock = clock
        self.image = pygame.Surface((width, height))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

    def register_sprite(self, sprite):
        self.sprites.add(sprite)

    def clear_onscreen(self):
        self.onscreen.empty()

    def make_onscreen(self):
        self.onscreen.add(
            pygame.sprite.spritecollide(self, self.sprites, False)
        )

    def draw_onscreen(self, window):
        self.clear_onscreen()
        self.make_onscreen()

        for sprite in self.onscreen:
            window.blit(
                sprite.image,
                (sprite.rect.x - self.rect.x, sprite.rect.y - self.rect.y)
            )

        if self.debug:
            self.show_debug_info()

    def moveXY(self, dx, dy):
        self.rect.x += dx
        self.rect.y += dy

    def moveX(self, dx):
        self.rect.x += dx

    def moveY(self, dy):
        self.rect.y += dy

    def setXY(self, x, y):
        self.rect.x = x
        self.rect.y = y

    def setX(self, x):
        self.rect.x = x

    def setY(self, y):
        self.rect.y = y

    def toggle_debug(self):
        self.debug = not self.debug

    def get_debug_info_string(self):
        return str(self.clock.get_fps())

    def show_debug_info(self):
        self.window.blit(
            default_font.render(self.get_debug_info_string(), False, default_font_color),
            (0, 0)
        )


class AttachedCamera:
    """AttachedCamera: camera coords that depends on sprite attached coords"""

    def __init__(self, camera, sprite, distance=[0, 0]):
        self.camera = camera
        self.sprite = sprite
        self.distance = distance

    def keep_attached(self):
        self.camera.setXY(
            self.sprite.rect.x - self.distance[0] + self.sprite.rect.width // 2,
            self.sprite.rect.y - self.distance[1] + self.sprite.rect.height // 2
        )


class DebugSprite(pygame.sprite.Sprite):
    """DebugSprite: sprite for debugging games"""

    def __init__(self, width, height, color=(255, 255, 255), x=0, y=0):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((width, height))
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

    def move_randomly(self):
        self.rect.x += ri(-5, 5)
        self.rect.y += ri(-5, 5)

    def moveXY(self, dx, dy):
        self.rect.x += dx
        self.rect.y += dy

    def moveX(self, dx):
        self.rect.x += dx

    def moveY(self, dy):
        self.rect.y += dy

    def setXY(self, x, y):
        self.rect.x = x
        self.rect.y = y

    def setX(self, x):
        self.rect.x = x

    def setY(self, y):
        self.rect.y = y


class TileMaker:
    """TileMaker: tiling class"""

    def __init__(self):
        pass


class CustomMouse(pygame.sprite.Sprite):
    """CustomMouse: class for making custom skinned mouse pointers"""
    __pointers = {
        "default" : pygame.Surface((0, 0)),
        "right_clicked" : pygame.Surface((0, 0)),
        "center_clicked" : pygame.Surface((0, 0)),
        "left_clicked" : pygame.Surface((0, 0))
    }

    def __init__(self, pointers={}):
        pygame.sprite.Sprite.__init__(self)
        pygame.mouse.set_visible(False)
        for key, value in pointers.items():
            if key in self.__pointers.keys():
                self.__pointers[key] = value
        self.image = self.__pointers["default"]
        self.rect = self.image.get_rect()

    def update_animations(self):
        clicked = pygame.mouse.get_pressed()
        if clicked[0] == 1 and self.__pointers["left_clicked"] != None:
            self.image = self.__pointers["left_clicked"]
        elif clicked[1] == 1 and self.__pointers["center_clicked"] != None:
            self.image = self.__pointers["center_clicked"]
        elif clicked[2] == 1 and self.__pointers["right_clicked"] != None:
            self.image = self.__pointers["right_clicked"]
        else:
            self.image = self.__pointers["default"]

    def keep_mouse_coords(self):
        coords = pygame.mouse.get_pos()
        self.rect.x = coords[0]
        self.rect.y = coords[1]

    def draw(self, surface):
        surface.blit(self.image, (self.rect.x, self.rect.y))

    def moveXY(self, dx, dy):
        self.rect.x += dx
        self.rect.y += dy

    def moveX(self, dx):
        self.rect.x += dx

    def moveY(self, dy):
        self.rect.y += dy

    def setXY(self, x, y):
        self.rect.x = x
        self.rect.y = y

    def setX(self, x):
        self.rect.x = x

    def setY(self, y):
        self.rect.y = y


class LimitBox(pygame.sprite.Sprite):
    """LimitBox: class for limit boxes"""

    def __init__(self):
        pass


class LimitBoxManager():
    """LimitBoxManager: class for managing limit boxes"""

    def __init__(self):
        pass
